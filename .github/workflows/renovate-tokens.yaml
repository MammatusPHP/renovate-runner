name: Renovate Tokens

on:
  schedule:
    - cron: "* * * * *"
  push:
    branches:
      - 'main'

jobs:
  repositories:
    name: Renovate Tokens
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.repositories.outputs.result }}
    steps:
      - name: Generate App Token for Renovate
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          app-id: ${{ secrets.RENOVATE_BOT_CLIENT_ID }}
          private-key: ${{ secrets.RENOVATE_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ secrets.RENOVATE_REPOSITORIES }}
      - name: List repositories
        uses: actions/github-script@v8
        id: repositories
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const response = await octokit.request('GET /installation/repositories', {
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            return response.data.repositories.flatMap((repo) => repo.name);
  set-token-for-repository:
    name: Renovate Tokens
    runs-on: ubuntu-latest
    needs:
      - repositories
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(needs.repositories.outputs.repositories) }}
    steps:
      - run: npm install libsodium-wrappers
      - run: echo "${{ matrix.repository }}"
      - name: Generate App Token for Renovate to be shared across repos
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: repo-token
        with:
          app-id: ${{ secrets.RENOVATE_BOT_CLIENT_ID }}
          private-key: ${{ secrets.RENOVATE_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: renovate-runner
      - name: Set WorkFlow Dispatch Token
        uses: actions/github-script@v8
        id: repositories
        with:
          github-token: ${{ steps.repo-token.outputs.token }}
          script: |
            const sodium = require('libsodium-wrappers');
            const key = await octokit.request('GET /repos/{owner}/{repo}/actions/secrets/public-key', {
              owner: '${{ github.repository_owner }}',
              repo: '${{ matrix.repository }}',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
            const secret = '${{ steps.repo-token.outputs.token }}';
            await sodium.ready;
            // Convert the secret and key to a Uint8Array.
            let binkey = sodium.from_base64(key.data.key, sodium.base64_variants.ORIGINAL)
            let binsec = sodium.from_string(secret)
            // Encrypt the secret using libsodium
            let encBytes = sodium.crypto_box_seal(binsec, binkey)
            await octokit.request('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}', {
              owner: '${{ github.repository_owner }}',
              repo: '${{ matrix.repository }}',
              secret_name: 'RENOVATE_WORKFLOW_DISPATCH_TOKEN',
              encrypted_value: sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL),
              key_id: key.data.key_id,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });